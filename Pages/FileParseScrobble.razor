@page "/fileparsescrobble"
@using IF.Lastfm.Core.Objects
@using WebScrubbler.Components
@using WebScrubbler.Data
@layout MainLayout

@inject LastfmClientService FMClient

<PageTitle>File Parse Scrobble</PageTitle>

<h3>File Parse Scrobble</h3>

<div style="position: relative; z-index: 1">
  <Grid>
    <RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="30" />
      <RowDefinition Height="*" />
    </RowDefinitions>
    <ColumnDefinitions>
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="5" />
      <ColumnDefinition Width="*" />
    </ColumnDefinitions>

    <Content>
      <GridElement Column="1" Row="1" VerticalAlignment="@Alignment.Center">
        File Type:
      </GridElement>
      <GridElement Column="3" Row="1">
        <InputSelect class="form-control" @bind-Value="SelectedFileType">
          @foreach (FileType type in Enum.GetValues(typeof(FileType)))
          {
            <option value="@type">@type</option>
          }
        </InputSelect>
      </GridElement>

      <GridElement Column="1" Row="3" ColumnSpan="3">
        @if (SelectedFileType == FileType.CSV)
        {
          <CSVParserComponent @ref="_selectedParserComponent" ScrobblesChanged="HandleScrobblesChange" />
        }
        else if (SelectedFileType == FileType.JSON)
        {
          <JSONParserComponent @ref="_selectedParserComponent" ScrobblesChanged="HandleScrobblesChange" />
        }
      </GridElement>
    </Content>
  </Grid>
</div>

@if (_selectedParserComponent != null && _selectedParserComponent.Scrobbles != null)
{
  <ScrobbleListComponent @ref="_scrobbleListComponent" Scrobbles="@_selectedParserComponent.Scrobbles"/>

  <button class="btn btn-primary" @onclick="Scrobble" disabled="@(Scrobbling || !_selectedParserComponent.Scrobbles.Any(s => s.ToScrobble))">
    @if (Scrobbling)
    {
      <div class="spinner-border" role="status" />
    }
    else
    {
      <span>Scrobble</span>
    }
  </button>
}


@code {
  public enum FileType
  {
    CSV,
    JSON
  }

  private FileType SelectedFileType;
  private ParserBaseComponent? _selectedParserComponent;
  private ScrobbleListComponent _scrobbleListComponent = new ScrobbleListComponent();
  private bool Scrobbling;

  protected override void OnInitialized()
  {
    SelectedFileType = FileType.CSV;
  }

  private async Task Scrobble()
  {
    try
    {
      var client = await FMClient.GetClient();
      if (client != null && _scrobbleListComponent != null && _scrobbleListComponent.Scrobbles != null)
      {

        Scrobbling = true;
        var scrobbles = _scrobbleListComponent.Scrobbles.Where(s => s.ToScrobble).Select(s => s.Scrobble);

        var respone = await client.Scrobbler.ScrobbleAsync(scrobbles);
      }
    }
    finally
    {
      Scrobbling = false;
    }
  }

  private async Task HandleScrobblesChange()
  {
    // need to update state manually for the nested scrobbles property
    // _scrobbleListComponent.Scrobbles = _selectedParserComponent.Scrobbles;
    StateHasChanged();
    await Task.FromResult(true);
  }
}
